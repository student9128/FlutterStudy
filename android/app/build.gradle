plugins {
    id "com.android.application"
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin"
}
def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

//def flutterRoot = localProperties.getProperty('flutter.sdk')
//if (flutterRoot == null) {
//    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
//}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}
def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file("key.properties")
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

def RELEASE_STORE_FILE = keystoreProperties.getProperty('KEY_RELEASE_STORE_FILE')
def RELEASE_STORE_PASSWORD = keystoreProperties.getProperty('KEY_RELEASE_STORE_PASSWORD')
def RELEASE_KEY_ALIAS = keystoreProperties.getProperty('KEY_RELEASE_KEY_ALIAS')
def RELEASE_KEY_PASSWORD = keystoreProperties.getProperty('KEY_RELEASE_KEY_PASSWORD')
// def RELEASE_STORE_FILE_AMAP = keystoreProperties.getProperty('KEY_RELEASE_STORE_FILE_AMAP')
// def RELEASE_STORE_PASSWORD_AMAP = keystoreProperties.getProperty('KEY_RELEASE_STORE_PASSWORD_AMAP')
// def RELEASE_KEY_ALIAS_AMAP = keystoreProperties.getProperty('KEY_RELEASE_KEY_ALIAS_AMAP')
// def RELEASE_KEY_PASSWORD_AMAP = keystoreProperties.getProperty('KEY_RELEASE_KEY_PASSWORD_AMAP')
//apply plugin: 'com.android.application'
//apply plugin: 'kotlin-android'
//apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    signingConfigs {
        release {
            storeFile file(RELEASE_STORE_FILE)
            storePassword RELEASE_STORE_PASSWORD
            keyAlias RELEASE_KEY_ALIAS
            keyPassword RELEASE_KEY_PASSWORD
        }

        debug {
            storeFile file(RELEASE_STORE_FILE)
            storePassword RELEASE_STORE_PASSWORD
            keyAlias RELEASE_KEY_ALIAS
            keyPassword RELEASE_KEY_PASSWORD
        }
        // amap {
        //     storeFile file(RELEASE_STORE_FILE_AMAP)
        //     storePassword RELEASE_STORE_PASSWORD_AMAP
        //     keyAlias RELEASE_KEY_ALIAS_AMAP
        //     keyPassword RELEASE_KEY_PASSWORD_AMAP
        // }
    }
    compileSdkVersion flutter.compileSdkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        applicationId "com.kevin.flutter_study_list"
        minSdkVersion 21
        targetSdkVersion 33
        versionCode 1
        versionName '1.0.0'
    }

    flavorDimensions "default"
    productFlavors {
        df{
            dimension "default"
            applicationId "com.kevin.flutter_study_list"
            resValue "string", "app_name", "flutter_study_demo"
            signingConfig signingConfigs.release
        }
//         amap {
//             dimension "default"
//             applicationId "com.astgo.jrtsd"
//             resValue "string", "app_name", "flutter_demo_amap"
//             signingConfig signingConfigs.amap
// //            applicationIdSuffix ".free"
//         }
        baidu{
            dimension "default"
            applicationId "com.kevin.flutter_study_list"
            resValue "string", "app_name", "flutter_demo_baidumap"
            signingConfig signingConfigs.release
        }
    }
    buildTypes {
        // amap_type {
        //     minifyEnabled false
        //     signingConfig signingConfigs.amap
        //     proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        // }
        release{
            minifyEnabled true
            shrinkResources true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug{
            minifyEnabled false
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

flutter {
    source '../..'
}

dependencies {
//    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation('com.amap.api:location:5.6.1')
    implementation('com.amap.api:3dmap:8.1.0')
}
